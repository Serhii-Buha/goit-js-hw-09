{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAAcJ,SAASC,cAAc,wBAsCyD,SAA3FI,EAAcC,EAAUC,GAEgD,MAAzEC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EAEyDI,EAAnD,C,SAAEN,E,MAAUC,IAGpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAjDbR,EAAKgB,iBAAiB,UAAUC,IAC9BA,EAAMC,iBAEN,MAAMC,EAAQC,OAAOjB,EAAWkB,OAC1BC,EAAOF,OAAOhB,EAAUiB,OACxBE,EAASH,OAAOf,EAAYgB,OAGY,IAAzC,IAAIG,EAAI,EAAGA,GAAKD,EAAQC,IAEkClB,EAA/CkB,EAAGL,GAASK,EAAI,GAAKF,GAE+BG,MAA1D,EAAClB,SAAEA,EAAQC,MAAEA,MACjBkB,EAAA5B,GAAS6B,OAAOC,QAAQ,qBAAqBrB,QAAeC,OAC5DqB,QAAQC,IAAI,uBAAqBvB,QAAiBC,MAAU,IAE7DuB,OAAM,EAACxB,SAAEA,EAAQC,MAAEA,MAClBkB,EAAA5B,GAAS6B,OAAOK,QAAQ,oBAAoBzB,QAAeC,OAC3DqB,QAAQC,IAAI,sBAAoBvB,QAAiBC,MAAU,GAC3D","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst delayInput = document.querySelector('input[name=\"delay\"]');\nconst stepInput = document.querySelector('input[name=\"step\"]');\nconst amountInput = document.querySelector('input[name=\"amount\"]');\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n\n  const delay = Number(delayInput.value);\n  const step = Number(stepInput.value);\n  const amount = Number(amountInput.value);\n  //метод Number() для преобразования значений полей формы в числа\n\n  for (let i = 1; i <= amount; i++) {\n    // запускается цикл, который повторится столько раз, сколько введено в поле \"amount\"\n    createPromise(i, delay + (i - 1) * step)\n      // вызывается функция createPromise с параметрами номера создаваемого промиса и задержки\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n});\n// amount = 5 - это количество промисов, которые будут созданы и выполнены в цикле;\n// step = 2000 - это количество миллисекунд, которое нужно добавить к задержке для каждого последующего промиса;\n// delay = 1000 - это базовая задержка для каждого промиса, которая будет увеличиваться на значение шага для каждого последующего промиса.\n\n// Мы находим форму и инпуты, в которых пользователь указывает задержку, шаг и количество промисов.\n// При отправке формы мы получаем значения delay, step и amount из соответствующих инпутов.\n// Затем мы запускаем цикл for, который будет создавать и выполнять указанное количество промисов. В цикле мы вызываем функцию createPromise, передавая ей номер текущего промиса и значение задержки, которое будет увеличиваться на значение шага для каждого последующего промиса. Таким образом,\n\n// первый промис будет выполнен с задержкой в 1000 мс, второй - с задержкой в 3000 мс(1000 + 1 * 2000), третий - с задержкой в 5000 мс(1000 + 2 * 2000) и т.д.\n\n// После создания каждого промиса мы вызываем метод then или catch в зависимости от того, выполнился ли промис успешно или нет.\n\n// //Функция createPromise принимает два аргумента: position - позиция создаваемого промиса, и delay - задержка в миллисекундах перед выполнением промиса.\n\nfunction createPromise(position, delay) {\n  // объявляется функция createPromise, которая принимает два параметра: номер создаваемого промиса = position и задержку = delay\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        // если сгенерированное значение булево true, то промис успешно выполняется\n        resolve({ position, delay });\n      } else {\n        // если сгенерированное значение булево false, то промис неудачно выполняется\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$delayInput","$47d4ff9957288465$var$stepInput","$47d4ff9957288465$var$amountInput","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","delay1","Number","value","step","amount","i","then","$parcel$interopDefault","Notify","success","console","log","catch","failure"],"version":3,"file":"03-promises.7c6dacea.js.map"}